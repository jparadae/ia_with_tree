# -*- coding: utf-8 -*-
"""ia.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iGu5o1v1gpNHrmxg5EVwnSuDqiMxbFxE
"""



import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

#Importando bibliotecas de arbol de aprendizaje
from sklearn import tree
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn import metrics

data = pd.read_csv('/car.data', header= None)
data.columns = ['price', 'mainenance', 'n_doors', 'capacity', 'size_lug', 'safety', 'Decision']
decision = data['Decision'].value_counts().sort_index(ascending = False)
print(data.sample(5))
print(decision)


#generando arbol de decision
"""
Para generar un buen modelo de arbol de decision, debes reemplazar los valores a numericos
inplace altera el dataframe(dts)
"""
data.sample(3)
data.price.replace(("vhigh","high", "med", "low"),(4,3,2,1), inplace = True)
data.mainenance.replace(('vhigh', 'high','med','low'), (4, 3, 2, 1), inplace = True)
data.n_doors.replace(('2','3','4','5more'),(1,2,3,4), inplace = True)
data.capacity.replace(('2','4','more'),(1,2,3), inplace = True)
data.size_lug.replace(('small', 'med', 'big'), (1,2,3), inplace = True)
data.safety.replace(('low', 'med','high'), (1,2,3), inplace = True)

"""Reemplazando el contenido a numeros para que la IA indique cual comprar"""
data['Decision'].replace(('unacc', 'acc', 'good', 'vgood'), (1,2,3,4), inplace = True)
data.head(5)

"""Dividiendo el conjunto de datos: eneñandole al algoritmo el metodo de aprendizaje
80% aprendizaje y 20% de pruebas
"""

dataset = data.values
X = dataset[:, 0:6]
Y = np.asarray(dataset[:,6], dtype = 'S6')

#Dividiendo en entrenamiento y prueba el dataset
X_Train, X_Test, Y_Train, Y_Test, = train_test_split(X, Y, test_size = 0.2, random_state = 0)

#iniciando el arbol con el metodo de decision con profundidad de 10
tr = tree.DecisionTreeClassifier(max_depth = 10)
tr.fit(X_Train, Y_Train) #Entrenando con X e Y

#verificando si aprende con los datos de test
y_pred = tr.predict(X_Test)
y_pred 

#verificando si el modelo aprende o no, con el metodo score para saber su precision con los datos test
score = tr.score(X_Test, Y_Test)
print('La precisión del modelo para el conjunto de datos de %0.4f'% (score))

#array([4,3,2,1]) #se cambian datos de Categorias a datos Numericos
data['price'].head()

#Generando Nuevo Grafico
price = data['price'].value_counts()

colors = ['#FF5733', '#FFC300', '#FF5733', '#FFC300']
price.plot(kind = 'bar', color = colors)
plt.xlabel('Precio')
plt.ylabel('Autos')
plt.title('Precio de autos')

#Trabajando con grafica de pastel

data['safety'].value_counts()
labels = ['low', 'med', 'high']

size = [576,576,576]
colors = ['cyan', 'gray', 'orange']
explode = [0.1,0,0]

print("····")
plt.pie(size, labels=labels, colors = colors, explode = explode, shadow= True, autopct = '%.2f%%')
plt.title('Niveles de seguridad', fontsize = 10)
plt.axis('off')
plt.legend(loc = 'best')
plt.show()

